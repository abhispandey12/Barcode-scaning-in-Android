package com.raatechnocrates.medinoservices;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.ColorDrawable;
import android.hardware.Camera;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.StrictMode;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.util.Pair;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import net.sourceforge.zbar.Config;
import net.sourceforge.zbar.Image;
import net.sourceforge.zbar.ImageScanner;
import net.sourceforge.zbar.Symbol;
import net.sourceforge.zbar.SymbolSet;

import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Abhishek on 6/9/2017.
 */

public class scan extends AppCompatActivity {

    ProgressDialog progressDialog;
    JSONParser jsonParser;

    String patient_exist_count="0";
    private Camera mCamera;
    private CameraPreview mPreview;
    private Handler autoFocusHandler;

     ImageScanner scanner;

    EditText txtbarcode;

    TextView scanText;
    Button ScanButton;

    private boolean barcodeScanned = false;
    private boolean previewing = true;

    ImageView imgSearch;

    static {
        System.loadLibrary("iconv");
    }

    @Override
    public void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.scan);

        jsonParser=new JSONParser();
        imgSearch=(ImageView)findViewById(R.id.imgSearch);
        txtbarcode=(EditText)findViewById(R.id.txtBarcode);

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA ) != PackageManager.PERMISSION_GRANTED ) {

            ActivityCompat.requestPermissions(this, new String[] {  android.Manifest.permission.CAMERA  },
                    11);
        }
        else {
            initCamera();
        }

        scanText=(TextView)findViewById(R.id.scanText);
        ScanButton=(Button)findViewById(R.id.ScanButton);

        imgSearch.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(txtbarcode.getText().toString().trim().equals("")){
                    Toast.makeText(scan.this,"Please Enter Mobile No to Scan",Toast.LENGTH_SHORT).show();
                }
                else{
                    scanText.setText(txtbarcode.getText().toString().trim());
                    new isPatientExist().execute(txtbarcode.getText().toString().trim());
                }
            }
        });

        getSupportActionBar().setTitle("Scan Barcode");
        getSupportActionBar().setElevation(0);
        getSupportActionBar().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.Black)));
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayUseLogoEnabled(true);
        getSupportActionBar().setHomeButtonEnabled(true);

        ScanButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (barcodeScanned) {
                    barcodeScanned = false;
                    scanText.setText("Scanning...");
                    initCamera();
                    //mCamera.setPreviewCallback(previewCb);
                    //mCamera.startPreview();
                    //previewing = true;
                    //mCamera.autoFocus(autoFocusCB);
                }
                else{
                    barcodeScanned = false;
                    scanText.setText("Scanning...");
                    initCamera();
                    mCamera.setPreviewCallback(previewCb);
                    mCamera.startPreview();
                    previewing = true;
                    mCamera.autoFocus(autoFocusCB);
                }
            }
        });
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case 11: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.
                   initCamera();

                } else {

                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                    final AlertDialog alertDialog=new AlertDialog.Builder(this).create();
                    alertDialog.setMessage("Please Allow Permission in Your App Settings to Use App Feature");
                    alertDialog.setButton(DialogInterface.BUTTON_POSITIVE, "OK", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            alertDialog.dismiss();
                            finish();
                        }
                    });
                    alertDialog.show();
                }
                return;
            }

            // other 'case' lines to check for other
            // permissions this app might request
        }
    }

    public void initCamera(){
        autoFocusHandler = new Handler();
        mCamera = getCameraInstance();
        scanner = new ImageScanner();
        scanner.setConfig(0, Config.X_DENSITY, 3);
        scanner.setConfig(0, Config.Y_DENSITY, 3);

        mPreview = new CameraPreview(this, mCamera, previewCb, autoFocusCB);
        FrameLayout preview = (FrameLayout)findViewById(R.id.cameraPreview);
        preview.addView(mPreview);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        /*if (id == R.id.action_settings) {
            return true;
        }*/

        if(id==android.R.id.home){;
            super.onBackPressed();
        }

        return super.onOptionsItemSelected(item);
    }

    public void onPause() {
        super.onPause();
        if(mCamera!=null) {
            mCamera.setPreviewCallback(null);
            mPreview.getHolder().removeCallback(mPreview);
            releaseCamera();
        }
    }

    /** A safe way to get an instance of the Camera object. */
    public static Camera getCameraInstance(){
        Camera c = null;
        try {
            c = Camera.open();
        } catch (Exception e){
        }
        return c;
    }

    private void releaseCamera() {
        if (mCamera != null) {
            previewing = false;
            mCamera.setPreviewCallback(null);
            mPreview.getHolder().removeCallback(mPreview);
            mCamera.release();
            mCamera = null;
        }
    }

    private Runnable doAutoFocus = new Runnable() {
        public void run() {
            if (previewing)
                mCamera.autoFocus(autoFocusCB);
        }
    };

    android.hardware.Camera.PreviewCallback previewCb = new android.hardware.Camera.PreviewCallback() {
        public void onPreviewFrame(byte[] data, Camera camera) {
            Camera.Parameters parameters = camera.getParameters();
            android.hardware.Camera.Size size = parameters.getPreviewSize();

            Image barcode = new Image(size.width, size.height, "Y800");
            barcode.setData(data);

            int result = scanner.scanImage(barcode);

            if (result != 0) {
                previewing = false;
                mCamera.setPreviewCallback(null);
                mCamera.stopPreview();

                SymbolSet syms = scanner.getResults();
                for (Symbol sym : syms) {
                    //scanText.setText("barcode result " + sym.getData());
                    scanText.setText(""+sym.getData());
                    barcodeScanned = true;
                    new isPatientExist().execute(sym.getData().toString().trim());
                    //Toast.makeText(scan.this,"BHAVIK--"+sym.getData().toString(),Toast.LENGTH_SHORT).show();

                    //finish();
                }
            }
        }
    };

    // Mimic continuous auto-focusing
    android.hardware.Camera.AutoFocusCallback autoFocusCB = new android.hardware.Camera.AutoFocusCallback() {
        public void onAutoFocus(boolean success, Camera camera) {
            autoFocusHandler.postDelayed(doAutoFocus, 1000);
        }
    };


    class isPatientExist extends AsyncTask<String,String,String> {

        @Override
        public void onPreExecute(){
            super.onPreExecute();
            progressDialog=new ProgressDialog(scan.this);
            progressDialog.setMessage("Please Wait...");
            progressDialog.setIndeterminate(false);
            progressDialog.setCancelable(false);
            progressDialog.show();
        }

        public String doInBackground(String... args){

            List<Pair<String,String>> params=new ArrayList<>();

            try{
                String url=config.server_url+"isPatientExist.php?patientmobileno="+args[0];
                Log.d("URLBHAVIK","--"+url);
                JSONObject object=jsonParser.sendPost(url,params);
                JSONArray arr=object.getJSONArray("response");
                if(arr.length()>0) {
                    JSONObject c = arr.getJSONObject(0);
                    patient_exist_count = c.getString("Count");
                }

            }
            catch (Exception ex){

            }

            return patient_exist_count;
        }

        public void onPostExecute(String result){
            progressDialog.dismiss();
            //Toast.makeText(scan.this,"--"+result+"--",Toast.LENGTH_SHORT).show();
            if(result.equals("0")){

                final AlertDialog alertDialog=new AlertDialog.Builder(scan.this).create();
                alertDialog.setButton(DialogInterface.BUTTON_POSITIVE, "OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        Intent patientDetails=new Intent(scan.this,MainMenuActivity.class);
                        startActivity(patientDetails);
                        finish();
                    }
                });
                alertDialog.setMessage("Something Went Wrong. Please Scan Again");
                alertDialog.show();


            }
            else{
                Intent patientDetails=new Intent(scan.this,PatientDetailFragment.class);
                patientDetails.putExtra("barcode",scanText.getText().toString().trim());
                startActivity(patientDetails);
                finish();
            }
        }
    }


}



